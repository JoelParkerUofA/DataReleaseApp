---
title: "Data Release Tables"
format: dashboard
server: shiny
---

```{r setup, include=FALSE}
library(shiny)
library(shinydashboard)
library(DBI) # Connecting to database
library(tidyverse) # Data wrangling
library(flextable) # Pretty table

load("Code/dbconnect_info.Rdata")

  # Connect to PAN database
con <- dbConnect(RPostgres::Postgres(),
                 user = dbconnect_info$user,
                 password = dbconnect_info$password, 
                 dbname = dbconnect_info$dbname,
                 host = dbconnect_info$host,
                 port = dbconnect_info$port,
                 sslrootcert = 'global-bundle.pem'
)
source("Code/get_participant_ids.R")
```


# {.sidebar}

```{r select date}
dateInput("Freezedate", "Select Freeze Date:", value = "2025-06-30", max = Sys.Date())
```

# Cartid Ultrasound

```{r}
#| title: "Carotid Ultrasound"

uiOutput("carotid_ultrasound_table")

```

```{r}
#| context: server


output$carotid_ultrasound_table <- renderUI({
  withProgress(message = "Loading table",{

  
  freeze_date <- input$Freezedate

  freeze_ids <- get_participant_ids(freeze_date, con)
  # Carotid data
  p2_carotid_ultrasound_velocity <- dbReadTable(con, "p2_carotid_ultrasound_velocity")
  
  ultrasound_table_dat <- 
  p2_carotid_ultrasound_velocity %>%
  right_join(data.frame(hml_id = freeze_ids), by = "hml_id") %>%
  select(-c(hml_id, redcap_id, mindcrowd_id, site, scan_date, notes)) %>%
  # Calculate missing data
  mutate(across(everything(), ~ifelse(is.na(.), 1, 0))) %>%
  mutate(sum_missing = rowSums(select(., everything())),
         complete_data = ifelse(sum_missing == 0, 1, 0),
         # velocity variables
         velocity = rowSums(select(., c(rcca_pws, rcca_pwd, r_sd_ratio, r_ri, 
                                        rbif_pws, rbif_pwd, rbif_sd_ratio, 
                                        rbif_ri, rica_pws, rica_pwd, rica_sd_ratio, 
                                        rica_ri, reca_pws, reca_pwd, reca_sd_ratio, 
                                        reca_ri, lcca_pws, lcca_pwd, l_sd_ratio, 
                                        l_ri, lbif_pws, lbif_pwd, lbif_sd_ratio, 
                                        lbif_ri, lica_pws, lica_pwd, lica_sd_ratio, 
                                        lica_ri, leca_pws, leca_pwd, leca_sd_ratio, 
                                        leca_ri))), 
         complete_velocity = ifelse(velocity == 0, 1, 0),
         # IMT variables
         imt = rowSums(select(., c(rccanwmx, rccanwmn, rccafwmx, rccafwmn, rbifnwmx, 
                                   rbifnwmn, rbiffwmx, rbiffwmn, ricanwmx, ricanwmn, 
                                   ricafwmx, ricafwmn, lccanwmx, lccanwmn, lccafwmx, 
                                   lccafwmn, lbifnwmx, lbifnwmn, lbiffwmx, lbiffwmn, 
                                   licanwmx, licanwmn, licafwmx, licafwmn))),
         complete_imt = ifelse(imt == 0, 1, 0),) %>%
  summarise(sum_velocity = sum(complete_velocity),
            sum_imt = sum(complete_imt) #, sum_complete = sum(complete_data)
            ) %>%
  pivot_longer(cols = everything()) %>%
  # Format percent for table
  mutate(value = paste0(value, " (", round(value/length(freeze_ids) * 100, 2), "%)"),
         name = case_when(#name == "sum_complete" ~ "All Data",
                          name == "sum_velocity" ~ "Velocity Data",
                          name == "sum_imt" ~ "Intima-Media Thickness (IMT) Data"))
  
  # Show table
ultrasound_table_dat %>%
  flextable() %>%
  set_header_labels(name = "", value = paste0("Available \n (N=", length(freeze_ids),")")) %>%
  autofit() %>%
  htmltools_value()

  
  })
})

```

# Cognitive Function

```{r}
#| title: "Cognitive Function"

uiOutput("cognitive_function_table")

```

```{r}
#| context: server

output$cognitive_function_table <- renderUI({
  withProgress(message = "Loading table",{
    
    freeze_date <- input$Freezedate
    freeze_ids <- get_participant_ids(freeze_date, con)
    
    scores_flk <- dbGetQuery(con, "SELECT * FROM scores_flk WHERE hml_id is not NULL") %>%
      filter(FLK_first_attempt) %>%
      mutate(flk_complete = ifelse(FLK_qc_code == "QC passed", "Complete", "Incomplete")) %>%
      select(hml_id, flk_complete)
    
    scores_kt <- dbGetQuery(con, "SELECT * FROM scores_kt WHERE hml_id is not NULL") %>%
      filter(KT_first_attempt) %>%
      mutate(kt_complete = ifelse(KT_qc_code == "QC passed", "Complete", "Incomplete")) %>%
      select(hml_id, kt_complete)
    
    scores_ln <- dbGetQuery(con, "SELECT * FROM scores_ln WHERE hml_id is not NULL") %>%
      filter(LN_first_attempt) %>%
      mutate(ln_complete = ifelse(LN_qc_code == "QC passed", "Complete", "Incomplete")) %>%
      select(hml_id, ln_complete)
    
    scores_scrt <- dbGetQuery(con, "SELECT * FROM scores_scrt WHERE hml_id is not NULL") %>%
      filter(SCRT_first_attempt) %>%
      mutate(scrt_complete = ifelse(SCRT_qc_code == "QC passed", "Complete", "Incomplete")) %>%
      select(hml_id, scrt_complete)
    
    scores_wp <- dbGetQuery(con, "SELECT * FROM scores_wp WHERE hml_id is not NULL") %>%
      filter(WP_first_attempt) %>%
      mutate(wp_complete = ifelse(WP_qc_code == "QC passed", "Complete", "Incomplete")) %>%
      select(hml_id, wp_complete)
    
    cog_scores <- data.frame(hml_id = freeze_ids) %>%
      left_join(scores_flk, by = "hml_id") %>%
      left_join(scores_kt, by = "hml_id") %>%
      left_join(scores_ln, by = "hml_id") %>%
      left_join(scores_scrt, by = "hml_id") %>%
      left_join(scores_wp, by = "hml_id") %>%
      mutate(across(-hml_id, ~ifelse(is.na(.), "Incomplete", "Complete"))) %>%
      distinct() %>%
      select(-hml_id) %>%
      mutate(across(everything(), ~ifelse(. == "Incomplete", 0, 1)))
    
    games_tab <- cog_scores %>%
      pivot_longer(cols = everything(), names_to = "game", values_to = "available") %>%
      group_by(game) %>%
      mutate(total = n()) %>%
      group_by(total, .add = TRUE) %>%
      summarise(sum_available = sum(available)) %>%
      ungroup() %>%
      mutate(percent_available = round(sum_available/total, 3) * 100,
             percent_available = paste0(sum_available, " (", percent_available, "%)")) %>%
      select(game, percent_available) %>%
      mutate(game = str_remove(game, "_complete"),
             game = case_when(game == "flk" ~ "Flanker Task",
                              game == "kt" ~ "Keep Track Task",
                              game == "ln" ~ "Letter Number Task",
                              game == "scrt" ~ "Simple and Choice Reaction Time",
                              game == "wp" ~ "Verbal Paired Associate Learning "))
    

  
    p2_redcap_cognitive_function_avlt <- dbGetQuery(con, "SELECT hml_id, avlt_complete FROM p2_redcap_cognitive_function_avlt")
    
    p2_redcap_cognitive_function_moca <- dbGetQuery(con, "SELECT hml_id, moca_complete FROM p2_redcap_cognitive_function_moca")
    
    p2_redcap_cognitive_function_naart <- dbGetQuery(con, "SELECT hml_id, naart_complete FROM p2_redcap_cognitive_function_naart")
    
    p2_redcap_cognitive_function_phq9 <- dbGetQuery(con, "SELECT hml_id, phq9_complete FROM p2_redcap_cognitive_function_phq9")
    
    
    cognitive_function_table_dat <- data.frame(hml_id = freeze_ids) %>%
      left_join(p2_redcap_cognitive_function_avlt, by = "hml_id") %>%
      left_join(p2_redcap_cognitive_function_moca, by = "hml_id") %>%
      left_join(p2_redcap_cognitive_function_naart, by = "hml_id") %>%
      left_join(p2_redcap_cognitive_function_phq9, by = "hml_id") %>%
      select(-hml_id) %>%
      mutate(across(everything(), ~ifelse(is.na(.), 0, .))) %>%
      summarise(avlt = sum(avlt_complete),
                moca = sum(moca_complete),
                naart = sum(naart_complete),
                'PHQ-9*' = sum(phq9_complete)) %>%
      pivot_longer(everything()) %>%
      mutate(value = paste0(value, " (", round(value/length(freeze_ids) * 100, 2), "%)"),
             name = str_to_upper(name),
             name = ifelse(name == "MOCA", "MoCA", name))
    
    
    # Rename games names to match other test names
    names(games_tab) <- c("name", "value")
    
    cognitive_function_table <- rbind(cognitive_function_table_dat, games_tab) %>%
      flextable() %>%
      set_header_labels(name = "", value = paste0("Available \n (N=", length(freeze_ids),")")) %>%
      autofit() %>%
      add_footer_lines( value = " *PHQ-9 is a depression screening tool") %>%
      htmltools_value()
    
    
    cognitive_function_table

})
})
```

# Labs and Biomarkers
```{r}
#| title: "Labs and Biomarkers"

uiOutput("labs_biomarkers_table")
```

```{r}
#| context: server

output$labs_biomarkers_table <- renderUI({
  withProgress(message = "Loading Table",{

    freeze_date <- input$Freezedate
    freeze_ids <- get_participant_ids(freeze_date, con)
    
    coreg_ad_plasma_biomarkers <- dbGetQuery(con, "SELECT hml_id, abeta_40 FROM coreg_ad_plasma_biomarkers")

    coreg_doyle_cytokine <- dbReadTable(con, "coreg_doyle_cytokine") # Millipore Plasma Cytokines
    
    coreg_nulisaseq <- dbGetQuery(con, "SELECT hml_id, apoe FROM coreg_nulisaseq") # NULISA CNS Disease Panel
    
    coreg_huentelman_apoe4 <- dbGetQuery(con, "SELECT hml_id, apoe_status FROM coreg_huentelman_apoe4")
    
    coreg_huentelman_epigenetic <- dbGetQuery(con, "SELECT hml_id, horvath2013 FROM coreg_huentelman_epigenetic")
    
    coreg_huentelman_prs <- dbGetQuery(con, "SELECT hml_id, adhd FROM coreg_huentelman_prs")
    
    
    p2_sonora_quest_labwork <- dbReadTable(con, "p2_sonora_quest_labwork")
    
    biomarkers <- coreg_ad_plasma_biomarkers %>%
  filter(hml_id %in% freeze_ids) %>%
  mutate(complete_biomarkers = ifelse(!is.na(abeta_40), 1, 0))  %>%
  summarise(`AD Plasma Biomarkers` = sum(complete_biomarkers))

  millipore <- coreg_doyle_cytokine %>%
    filter(hml_id %in% freeze_ids) %>%
    select(hml_id, 
           Eotaxin, Fgf2, IFNg, IL_10, IL_12p40, IL_13, IL_15, 
           IL_17a, IL_1a, IL_1b, IL_2, IL_4, IL_5, IL_6, IL_7, 
           IL_8, IP_10, MCP_1, MDC, MIP_1a, MIP_1b, TNFa, TNFb, VEGFa) %>%
    mutate(across(-hml_id, ~ifelse(is.na(.), 1, 0 ))) %>%
    mutate(sum_missing = rowSums(select(., -hml_id)),
           millipore_complete = ifelse(sum_missing == 0, 1, 0))  %>%
    summarise(`Millipore Cytokine Assay` = sum(millipore_complete))
  
  nulisa <- coreg_nulisaseq %>%
    filter(hml_id %in% freeze_ids) %>%
    mutate(complete_nulisa = ifelse(!is.na(apoe), 1, 0))  %>%
    summarise(`NULISA Seq CNS Disease Panel` = sum(complete_nulisa))
  
  apoe <- coreg_huentelman_apoe4 %>%
    filter(hml_id %in% freeze_ids) %>%
    mutate(complete_apoe = ifelse(!is.na(apoe_status), 1, 0))  %>%
    summarise(`APOE4 Status` = sum(complete_apoe))
  
  epigenetic <- coreg_huentelman_epigenetic %>%
    filter(hml_id %in% freeze_ids) %>%
    mutate(complete_epigenetic = ifelse(!is.na(horvath2013), 1, 0))  %>%
    summarise(`Epigenetic Clocks` = sum(complete_epigenetic))
  
  prs <- coreg_huentelman_prs %>%
    filter(hml_id %in% freeze_ids) %>%
    mutate(complete_prs = ifelse(!is.na(adhd), 1, 0))  %>%
    summarise(`Polygenic Risk Scores` = sum(complete_prs))
  
  labwork <- p2_sonora_quest_labwork %>%
    filter(hml_id %in% freeze_ids) %>%
    filter(visit == 1) %>%
    select(hml_id, alanine_aminotransferase, albumin, albumin_globulin_ratio, 
           alkaline_phosphatase, anion_gap, aspartate_aminotransferase, 
           bilirubin_total, bun_creatinine_ratio, calcium, carbon_dioxide_co2, 
           chloride, cholesterol, cholesterol_hdl_ratio, creatinine, 
           crp_high_sensitivity, egfrcr_ckd_epi, estimated_average_glucose_eag, 
           globulin, glucose, hdl_cholesterol, hemoglobin_a1c, insulin_fasting, 
           ldl_cholesterol_calculated, non_hdl_cholesterol, potassium, 
           protein_total, sodium, triglycerides, urea_nitrogen_bun, 
           vldl_cholesterol) %>%
    mutate(across(-hml_id, ~ifelse(is.na(.), 1, 0 ))) %>%
    mutate(sum_missing = rowSums(select(., -hml_id)),
           labwork_complete = ifelse(sum_missing == 0, 1, 0))  %>%
    summarise(`Sonora Quest Blood Chemistries` = sum(labwork_complete))
  
  lab_biomarkers_dat <- cross_join(biomarkers, apoe) %>%
    cross_join(epigenetic) %>%
    cross_join(millipore) %>%
    cross_join(nulisa) %>%
    cross_join(prs) %>%
    cross_join(labwork) %>%
    pivot_longer(everything()) %>%
    mutate(value = paste0(value, " (", round(value/length(freeze_ids) * 100, 2), "%)"))
      
  
  lab_biomarkers_dat %>%
  flextable() %>%
  set_header_labels(name = "", value = paste0("Available \n (N=", length(freeze_ids),")")) %>%
  autofit() %>%
  htmltools_value()

  })
})
```


# Non-Invasive Technology

```{r}
#| title: "Non-Invasive Technology"

uiOutput("non_invasive_technology_table")
```

```{r}
#| context: server

output$non_invasive_technology_table <- renderUI({
  withProgress(message = "Loading Table",{
    freeze_date <- input$Freezedate
    freeze_ids <- get_participant_ids(freeze_date, con)
    #############
## 1. Wearables (Garmin)

## 2. Language and Speech Task
#
## 3. Frailty (Upper Extremity Function)
#
#  4. Cortisol 
##

    coref_najafi_garmin <- dbReadTable(con, "coref_najafi_garmin")
    
    coref_mehl_languagespeechtask <- dbReadTable(con, "coref_mehl_languagespeechtask")
    
    coref_najafi_frailty <- dbReadTable(con, "coref_najafi_frailty")
    
    coref_runyon_cortisol <- dbReadTable(con, "coref_runyon_cortisol")

    
        # Note: Need to check formantposition variable ("Not enough samples")
    garmin <- coref_najafi_garmin %>%
      right_join(data.frame(hml_id = freeze_ids), by = "hml_id") %>%
      mutate(days_of_recording = as.numeric(days_of_recording),
             days_of_recording = ifelse(is.na(days_of_recording), 0, days_of_recording),
             # Data available if participant wore watch at least one day
             greater_than_zero = ifelse(days_of_recording > 0, 1, 0),
             sum_greater_than_zero = sum(greater_than_zero),
             # 8to8 and 10hr data is missing for some participants
             complete_data = ifelse(!is.na(mean_daily_steps_8to8), 1, 0),
             sum_complete_data = sum(complete_data),
             # Total participants
             n = n()) %>%
      filter(greater_than_zero == 1) %>%
      # Get range of days of recording
      mutate(range_days_of_recording = paste0(median(days_of_recording), 
                                              " [", quantile(days_of_recording, .25), " - ",
                                              quantile(days_of_recording, .75), "]")) %>%
      select(range_days_of_recording, sum_greater_than_zero, sum_complete_data, n) %>%
      distinct() %>%
      select(`Garmin`= sum_complete_data)
    
    language <- coref_mehl_languagespeechtask %>%
      filter(hml_id %in% freeze_ids) %>%
      select(hml_id, formantposition, inputfile) %>%
      mutate(formantposition = ifelse(formantposition == "Not enough samples, requires at least 30", 1, 0)) %>%
      summarise(missing_data = sum(formantposition, na.rm = T), .by = "hml_id") %>%
      mutate(complete_language = ifelse(missing_data == 0, 1, 0)) %>%
      summarise(`Language Speech Task` = sum(complete_language))
    
    frailty <- coref_najafi_frailty %>%
      filter(hml_id %in% freeze_ids) %>%
      select(DT_FI, ST_FI) %>%
      mutate(across(everything(), ~ifelse(is.na(.), 1, 0))) %>%
      mutate(complete_frailty = ifelse(DT_FI + ST_FI == 0, 1, 0)) %>%
      summarise(`UEF Frailty` = sum(complete_frailty))
      
    cortisol <- coref_runyon_cortisol %>%
      filter(hml_id %in% freeze_ids) %>%
      mutate(complete_cortisol = ifelse(!is.na(cortisol), 1, 0)) %>%
      summarise(Cortisol = sum(complete_cortisol))
    
    psychosocial_visits_dat <- cross_join(garmin,language) %>%
      cross_join(frailty) %>%
      cross_join(cortisol) %>%
      pivot_longer(everything()) %>%
      mutate(value = paste0(value, " (", round(value/length(freeze_ids) * 100, 2), "%)"))
        
    psychosocial_visits_dat %>%
      flextable() %>%
      set_header_labels(name = "", value = paste0("Available \n (N=", length(freeze_ids),")")) %>%
      autofit() %>%
      htmltools_value()
    
  })
})

```  
# Survey Data

```{r}
#| title: "Survey Data"

uiOutput("survey_data_table")
```

```{r}
#| context: server

output$survey_data_table <- renderUI({
  withProgress(message = "Loading Table",{
    
    freeze_date <- input$Freezedate
    freeze_ids <- get_participant_ids(freeze_date, con = con)
    
    survey_names <- c("anxiety", "perceived_stress", "qpar", "sleep",
           "social_stressor", "social_support", "swls")

    raw_survey_list <- lapply(survey_names, 
                              function(x){
                                if(x == "fhad"){
                                  new_x <- dbReadTable(con, paste0("p2_redcap_", "family_history"))
                                }else{
                                  new_x <- dbReadTable(con, paste0("p2_redcap_", x))
                                }
                                
                                x <- case_when(x == "perceived_stress" ~ "stress",
                                               x == "social_stressor" ~ "socstress",
                                               x == "social_support" ~ "socsupp",
                                               TRUE ~ x)
                                
                                new_x %>%
                                  filter(visit == 1) %>%
                                  select(hml_id, all_of(paste0(x, "_complete")))
                                
                              })
    names(raw_survey_list) <- survey_names
    
    reduce(raw_survey_list, full_join, by = "hml_id") %>%
    right_join(data.frame(hml_id = freeze_ids), by = "hml_id") %>%
    select(-hml_id) %>%
    mutate(across(everything(), ~ifelse(is.na(.), 0, .))) %>%
    rename("Anxiety" = "anxiety_complete",
           "Stress" = "stress_complete",
           "QPAR" = "qpar_complete",
           "Sleep" = "sleep_complete",
           "Social Stressors" = "socstress_complete",
           "Social Support" = "socsupp_complete",
           "SWLS" = "swls_complete") %>%
    pivot_longer(cols = everything(), names_to = "survey", values_to = "available") %>%
    group_by(survey) %>%
    mutate(total = n()) %>%
    group_by(total, .add = TRUE) %>%
    summarise(sum_available = sum(available)) %>%
    ungroup() %>%
    mutate(percent_available = round(sum_available/total, 3) * 100,
           percent_available = paste0(sum_available, " (", percent_available, "%)")) %>%
    select(survey, percent_available) %>%
    flextable() %>%
    set_header_labels(survey = "", percent_available = paste0("Available \n (N=", length(freeze_ids),")")) %>%
    autofit() %>%
    htmltools_value()
    
  })
})
```

# Wearables

```{r}
#| title: "Wearables"

uiOutput("wearables_table")
```

```{r}
#| context: server

output$wearables_table <- renderUI({
  withProgress(message = "Loading Table", {
    
    freeze_date <- input$Freezedate
    freeze_ids <- get_participant_ids(freeze_date, con)
    
    # Get data
    coref_najafi_garmin <- dbReadTable(con, "coref_najafi_garmin")
    
    # wrangle data
    raw_garmin_table_dat <- coref_najafi_garmin %>%
      right_join(data.frame(hml_id = freeze_ids), by = "hml_id") %>%
      mutate(days_of_recording = as.numeric(days_of_recording),
             days_of_recording = ifelse(is.na(days_of_recording), 0, days_of_recording),
             # Data available if participant wore watch at least one day
             greater_than_zero = ifelse(days_of_recording > 0, 1, 0),
             sum_greater_than_zero = sum(greater_than_zero),
             # 8to8 and 10hr data is missing for some participants
             complete_data = ifelse(!is.na(mean_daily_steps_8to8), 1, 0),
             sum_complete_data = sum(complete_data),
             # Total participants
             n = n()) %>%
      filter(greater_than_zero == 1) %>%
      # Get range of days of recording
      mutate(range_days_of_recording = paste0(median(days_of_recording), 
                                              " [", quantile(days_of_recording, .25), " - ",
                                              quantile(days_of_recording, .75), "]")) %>%
      select(range_days_of_recording, sum_greater_than_zero, sum_complete_data, n) %>%
      distinct() 
    
    num_available <- raw_garmin_table_dat$sum_greater_than_zero
    
    garmin_table_dat <- raw_garmin_table_dat %>%
      # Get percentages
      mutate(percent_complete_data = paste0(sum_complete_data, " (", round(sum_complete_data/n * 100, 2), "%)")) %>%
      select(percent_complete_data, range_days_of_recording) %>%
      pivot_longer(cols = everything()) %>%
      mutate(name = case_when(name == "percent_complete_data" ~ "Complete Garmin Data",
                              name == "range_days_of_recording" ~ "Days of Recording (Median [IQR])"))
    
    
    # Create table
    garmin_table_dat %>%
      flextable() %>%
      set_header_labels(name = "", value = paste0("Available \n (N=", length(freeze_ids),")")) %>%
      autofit() %>%
      htmltools_value()


  })
})

```
