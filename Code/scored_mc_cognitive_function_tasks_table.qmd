---
output:
   html_document:
    self_contained: true
execute:
  echo: false
  message: false
  warning: false
---

```{r setup}

# Freeze date
freeze_date <- as.Date("2025-06-30")

# Load packages
library(DBI) # Connecting to database
library(tidyverse) # Data wrangling
library(flextable) # Pretty table

# Connect to PAN database
con <- dbConnect(RPostgres::Postgres(),
                 user = Sys.getenv("user")
                 , password = Sys.getenv("password")
                 , dbname = Sys.getenv("dbname")
                 , host = Sys.getenv("host")
                 , port = Sys.getenv("port")
                 , sslrootcert = 'global-bundle.pem'
)

source("get_participant_ids.R")
freeze_ids <- get_participant_ids(freeze_date)

```

```{r pull-mc-cognitive-function-task-data}

scores_flk <- dbGetQuery(con, "SELECT * FROM scores_flk WHERE hml_id is not NULL") %>%
  filter(FLK_first_attempt) %>%
  mutate(flk_complete = ifelse(FLK_qc_code == "QC passed", "Complete", "Incomplete")) %>%
  select(hml_id, flk_complete)

scores_kt <- dbGetQuery(con, "SELECT * FROM scores_kt WHERE hml_id is not NULL") %>%
  filter(KT_first_attempt) %>%
  mutate(kt_complete = ifelse(KT_qc_code == "QC passed", "Complete", "Incomplete")) %>%
  select(hml_id, kt_complete)

scores_ln <- dbGetQuery(con, "SELECT * FROM scores_ln WHERE hml_id is not NULL") %>%
  filter(LN_first_attempt) %>%
  mutate(ln_complete = ifelse(LN_qc_code == "QC passed", "Complete", "Incomplete")) %>%
  select(hml_id, ln_complete)

scores_scrt <- dbGetQuery(con, "SELECT * FROM scores_scrt WHERE hml_id is not NULL") %>%
  filter(SCRT_first_attempt) %>%
  mutate(scrt_complete = ifelse(SCRT_qc_code == "QC passed", "Complete", "Incomplete")) %>%
  select(hml_id, scrt_complete)

scores_wp <- dbGetQuery(con, "SELECT * FROM scores_wp WHERE hml_id is not NULL") %>%
  filter(WP_first_attempt) %>%
  mutate(wp_complete = ifelse(WP_qc_code == "QC passed", "Complete", "Incomplete")) %>%
  select(hml_id, wp_complete)

cog_scores <- data.frame(hml_id = freeze_ids) %>%
  left_join(scores_flk, by = "hml_id") %>%
  left_join(scores_kt, by = "hml_id") %>%
  left_join(scores_ln, by = "hml_id") %>%
  left_join(scores_scrt, by = "hml_id") %>%
  left_join(scores_wp, by = "hml_id") %>%
  mutate(across(-hml_id, ~ifelse(is.na(.), "Incomplete", "Complete"))) %>%
  distinct() %>%
  select(-hml_id) %>%
  mutate(across(everything(), ~ifelse(. == "Incomplete", 0, 1)))

```

```{r create-percent-available-table}

cog_scores %>%
  pivot_longer(cols = everything(), names_to = "game", values_to = "available") %>%
  group_by(game) %>%
  mutate(total = n()) %>%
  group_by(total, .add = TRUE) %>%
  summarise(sum_available = sum(available)) %>%
  ungroup() %>%
  mutate(percent_available = round(sum_available/total, 3) * 100,
         percent_available = paste0(sum_available, " (", percent_available, "%)")) %>%
  select(game, percent_available) %>%
  mutate(game = str_remove(game, "_complete"),
         game = case_when(game == "flk" ~ "Flanker",
                          game == "kt" ~ "Keep Track",
                          game == "ln" ~ "Letter Number",
                          game == "scrt" ~ "Simple and Choice Reaction Tim",
                          game == "wp" ~ "Word Pairs")) %>%
  flextable() %>%
  set_header_labels(game = "", percent_available = paste0("Available \n (N=", length(freeze_ids),")")) %>%
  autofit()

```

